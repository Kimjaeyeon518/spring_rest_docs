plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "org.asciidoctor.jvm.convert" version "3.3.2"	// Asciidoctor plugin 적용
	id 'java'
}

group = 'spring.rest.api'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = "17"

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

dependencies {
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
//	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

ext {
	snippetsDir = file("build/generated-snippets")		// generated snippets location 설정
}

test {
	outputs.dir snippetsDir
	println "--------------TEST START-------------"
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test	// test task 이후에 실행될 수 있도록 의존성 설정
	println "--------------asciidoctor START-------------"
}

bootJar {
	dependsOn asciidoctor    // documentation has been generated before the jar is built
	// 실제 배포 시, BOOT-INF/classes가 classpath가 됩니다.
	println "@@@@@@@@@@@@@@@@@"
	println "${asciidoctor.outputDir}"
	from ("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}

task copyDocument(type: Copy) {
	println "--------------copyDocument START-------------"
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

targetCompatibility = JavaVersion.VERSION_17

// flow : test -> asciidoctor -> build jar